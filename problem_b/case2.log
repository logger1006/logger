ICCAD Contest B
Input:  ../testcase/case2.txt
Output: ./result/case2.out

Parsing input...
Non complete
Cell complete
Instance complete
N1
N2
N3
N4
N5
N6
Net complete
parser route complete
VoltageArea complete
Design boundary: 4 x 4
Number of layer: 3
Number of cell: 2
Number of instance: 6
Number of net: 6
Maximum of Cell Movement: 3
Total wire length: 30

Call RCM Router...
Initial routing engine
Loading design information..............complete
Creating routing graph..................complete
Creating forced model...................complete
Creating network........................complete
Linking network.........................complete
Creating voltage area index.............1
2
C2
C5
complete
 Net Forced 
Forced 
C1
Forced: T:0 D:2 R:1 L:0 CX:0 CY:1
C2
Forced: T:0 D:2 R:0 L:2 CX:0 CY:0
C3
Forced: T:3 D:0 R:2 L:2 CX:0 CY:0
C4
Forced: T:0 D:1 R:0 L:1 CX:1 CY:1
C5
Forced: T:1 D:0 R:1 L:0 CX:1 CY:1
C6
Forced: T:1 D:1 R:1 L:0 CX:0 CY:1

Start Routing Optimization
After pre reroute: 30
Picking Instances...
Pick instance: C3 Max forced: 3
Pick: C3
Collect: C3 
at single cell
at multipleCellMovement
Origin Rip net: 
N1
N4
N5
Find Place to Move
2
1
1
Here
Voltage Area: 0
6 6 7 7 8 8 9 9 10 10 10 
Choice 11
( 3 3 )( 3 1 )( 3 2 )( 4 1 )( 4 3 )( 4 2 )( 4 4 )( 3 4 )( 2 3 )( 2 2 )( 2 1 )
Place Result in total best: 0
C3 3 3 at 10
Route net
Original Length: 18 New Length: 11
check result
update model
C3
Forced: T:1 D:0 R:1 L:2 CX:2 CY:1
C1
Forced: T:0 D:2 R:1 L:0 CX:0 CY:1
C2
Forced: T:0 D:2 R:0 L:2 CX:0 CY:0
C4
Forced: T:0 D:0 R:0 L:0 CX:2 CY:2
C6
Forced: T:1 D:0 R:1 L:0 CX:1 CY:1
return  multipleCellMovement result
Iter 1 .................................left: 2
Reduce: 7

Picking Instances...
Pick instance: C3 Max forced: 0
Pick: C3
Collect: C3 
at single cell
at multipleCellMovement
Origin Rip net: 
N1
N4
N5
Find Place to Move
2
1
1
Here
Voltage Area: 0
6 6 7 7 
Choice 4
( 3 3 )( 3 1 )( 3 2 )( 4 1 )
Place Result in total best: 0
C3 3 3 at 3
Route net
No better solution in routing 
Original Length: 11 New Length: 11
check result
recover information
return  multipleCellMovement result
lock
Reduce: 0

Picking Instances...
Pick instance: C4 Max forced: 0
Pick: C4
Collect: C4 
at single cell
at multipleCellMovement
Origin Rip net: 
N3
N4
Find Place to Move
1
1
Here
Voltage Area: 0
-3 
Choice 1
( 3 3 )
Place Result in total best: 0
C4 3 3 at 0
Route net
No better solution in routing 
Original Length: 4 New Length: 4
check result
recover information
return  multipleCellMovement result
lock
Reduce: 0

Picking Instances...
Pick instance: C5 Max forced: 0
Pick: C5
Collect: C5 
at single cell
at multipleCellMovement
Origin Rip net: 
N2
N3
Find Place to Move
1
1
Here
Has constraint
Voltage Area: 4
2 4 5 5 
Choice 4
( 3 3 )( 4 4 )( 3 4 )( 4 3 )
Place Result in total best: 0
C5 3 3 at 3
Route net
No better solution in routing 
Original Length: 8 New Length: 8
check result
recover information
return  multipleCellMovement result
lock
Reduce: 0

Picking Instances...
Pick instance: C6 Max forced: 0
Pick: C6
Collect: C6 
at single cell
at multipleCellMovement
Origin Rip net: 
N5
N6
Find Place to Move
1
1
Here
Voltage Area: 0
3 3 4 4 4 4 
Choice 6
( 3 3 )( 4 1 )( 4 3 )( 4 2 )( 3 2 )( 3 1 )
Place Result in total best: 0
C6 3 3 at 5
Route net
No better solution in routing 
Original Length: 7 New Length: 7
check result
recover information
return  multipleCellMovement result
lock
Reduce: 0

Picking Instances...
No instances are picked
Single Cell Move:   1
Single Cell Failed Move:   4
Multiple Cell Move: 0
Multiple Cell Failed Move: 0
Failed Move:        4

Start post-routing optimization
Grid Length: 23 Calculate Length: 23
Ideal wire length is: 23
End optimization

SUMMARY
Number of Iteration:                    5
Number of success movement:             1
Number of failed movement:              4
Number of routing refinement:           0
Number of moved instance:               1
Additional Information for debug
Number of routing failed:               0
Number of placed failed:                0
Writing to output...
Spend time: 0
